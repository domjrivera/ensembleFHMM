// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// forward_step
void forward_step(NumericVector pi, NumericMatrix A, NumericMatrix emission_probs, ListOf<NumericMatrix>& P, double& loglik, int k, int n);
RcppExport SEXP _ensembleFHMM_forward_step(SEXP piSEXP, SEXP ASEXP, SEXP emission_probsSEXP, SEXP PSEXP, SEXP loglikSEXP, SEXP kSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emission_probs(emission_probsSEXP);
    Rcpp::traits::input_parameter< ListOf<NumericMatrix>& >::type P(PSEXP);
    Rcpp::traits::input_parameter< double& >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    forward_step(pi, A, emission_probs, P, loglik, k, n);
    return R_NilValue;
END_RCPP
}
// backward_sampling
void backward_sampling(IntegerVector& x, ListOf<NumericMatrix>& P, IntegerVector possible_values, int k, int n);
RcppExport SEXP _ensembleFHMM_backward_sampling(SEXP xSEXP, SEXP PSEXP, SEXP possible_valuesSEXP, SEXP kSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< ListOf<NumericMatrix>& >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type possible_values(possible_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    backward_sampling(x, P, possible_values, k, n);
    return R_NilValue;
END_RCPP
}
// backward_step
void backward_step(ListOf<NumericMatrix>& P, ListOf<NumericMatrix>& Q, int k, int n);
RcppExport SEXP _ensembleFHMM_backward_step(SEXP PSEXP, SEXP QSEXP, SEXP kSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<NumericMatrix>& >::type P(PSEXP);
    Rcpp::traits::input_parameter< ListOf<NumericMatrix>& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    backward_step(P, Q, k, n);
    return R_NilValue;
END_RCPP
}
// forward_backward_mod
arma::rowvec forward_backward_mod(arma::vec pi, arma::mat A, arma::mat emission_probs, int k, int n);
RcppExport SEXP _ensembleFHMM_forward_backward_mod(SEXP piSEXP, SEXP ASEXP, SEXP emission_probsSEXP, SEXP kSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type emission_probs(emission_probsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward_mod(pi, A, emission_probs, k, n));
    return rcpp_result_gen;
END_RCPP
}
// backward_step_mod
NumericMatrix backward_step_mod(ListOf<NumericMatrix>& P, ListOf<NumericMatrix>& Q, int k, int n);
RcppExport SEXP _ensembleFHMM_backward_step_mod(SEXP PSEXP, SEXP QSEXP, SEXP kSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<NumericMatrix>& >::type P(PSEXP);
    Rcpp::traits::input_parameter< ListOf<NumericMatrix>& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_step_mod(P, Q, k, n));
    return rcpp_result_gen;
END_RCPP
}
// forward_backward_fast
List forward_backward_fast(NumericVector pi, NumericMatrix A, NumericMatrix B, IntegerVector y, int k, int n, bool marginal_distr);
RcppExport SEXP _ensembleFHMM_forward_backward_fast(SEXP piSEXP, SEXP ASEXP, SEXP BSEXP, SEXP ySEXP, SEXP kSEXP, SEXP nSEXP, SEXP marginal_distrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type marginal_distr(marginal_distrSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward_fast(pi, A, B, y, k, n, marginal_distr));
    return rcpp_result_gen;
END_RCPP
}
// crossover
void crossover(IntegerVector& x, IntegerVector& y, int t);
RcppExport SEXP _ensembleFHMM_crossover(SEXP xSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    crossover(x, y, t);
    return R_NilValue;
END_RCPP
}
// crossover2
void crossover2(IntegerVector& x, IntegerVector& y, int t, int n);
RcppExport SEXP _ensembleFHMM_crossover2(SEXP xSEXP, SEXP ySEXP, SEXP tSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    crossover2(x, y, t, n);
    return R_NilValue;
END_RCPP
}
// crossover_one_element
void crossover_one_element(IntegerVector& x, IntegerVector& y, int t);
RcppExport SEXP _ensembleFHMM_crossover_one_element(SEXP xSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    crossover_one_element(x, y, t);
    return R_NilValue;
END_RCPP
}
// crossover_mat
void crossover_mat(IntegerMatrix X, IntegerMatrix Y, int t, IntegerVector which_rows);
RcppExport SEXP _ensembleFHMM_crossover_mat(SEXP XSEXP, SEXP YSEXP, SEXP tSEXP, SEXP which_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type which_rows(which_rowsSEXP);
    crossover_mat(X, Y, t, which_rows);
    return R_NilValue;
END_RCPP
}
// decimal_to_binary_mapping
IntegerMatrix decimal_to_binary_mapping(int K);
RcppExport SEXP _ensembleFHMM_decimal_to_binary_mapping(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_to_binary_mapping(K));
    return rcpp_result_gen;
END_RCPP
}
// hamming_ball
IntegerVector hamming_ball(int index, int radius, IntegerMatrix& mapping);
RcppExport SEXP _ensembleFHMM_hamming_ball(SEXP indexSEXP, SEXP radiusSEXP, SEXP mappingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type mapping(mappingSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming_ball(index, radius, mapping));
    return rcpp_result_gen;
END_RCPP
}
// construct_all_hamming_balls
IntegerMatrix construct_all_hamming_balls(int radius, IntegerMatrix& mapping);
RcppExport SEXP _ensembleFHMM_construct_all_hamming_balls(SEXP radiusSEXP, SEXP mappingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type mapping(mappingSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_all_hamming_balls(radius, mapping));
    return rcpp_result_gen;
END_RCPP
}
// construct_restricted_space
IntegerVector construct_restricted_space(int x_t, IntegerVector which_rows_fixed, IntegerMatrix mapping);
RcppExport SEXP _ensembleFHMM_construct_restricted_space(SEXP x_tSEXP, SEXP which_rows_fixedSEXP, SEXP mappingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x_t(x_tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type which_rows_fixed(which_rows_fixedSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type mapping(mappingSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_restricted_space(x_t, which_rows_fixed, mapping));
    return rcpp_result_gen;
END_RCPP
}
// construct_all_restricted_space
IntegerMatrix construct_all_restricted_space(int k_restricted, IntegerVector which_rows_fixed, IntegerMatrix mapping);
RcppExport SEXP _ensembleFHMM_construct_all_restricted_space(SEXP k_restrictedSEXP, SEXP which_rows_fixedSEXP, SEXP mappingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k_restricted(k_restrictedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type which_rows_fixed(which_rows_fixedSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type mapping(mappingSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_all_restricted_space(k_restricted, which_rows_fixed, mapping));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_module_Chain();

static const R_CallMethodDef CallEntries[] = {
    {"_ensembleFHMM_forward_step", (DL_FUNC) &_ensembleFHMM_forward_step, 7},
    {"_ensembleFHMM_backward_sampling", (DL_FUNC) &_ensembleFHMM_backward_sampling, 5},
    {"_ensembleFHMM_backward_step", (DL_FUNC) &_ensembleFHMM_backward_step, 4},
    {"_ensembleFHMM_forward_backward_mod", (DL_FUNC) &_ensembleFHMM_forward_backward_mod, 5},
    {"_ensembleFHMM_backward_step_mod", (DL_FUNC) &_ensembleFHMM_backward_step_mod, 4},
    {"_ensembleFHMM_forward_backward_fast", (DL_FUNC) &_ensembleFHMM_forward_backward_fast, 7},
    {"_ensembleFHMM_crossover", (DL_FUNC) &_ensembleFHMM_crossover, 3},
    {"_ensembleFHMM_crossover2", (DL_FUNC) &_ensembleFHMM_crossover2, 4},
    {"_ensembleFHMM_crossover_one_element", (DL_FUNC) &_ensembleFHMM_crossover_one_element, 3},
    {"_ensembleFHMM_crossover_mat", (DL_FUNC) &_ensembleFHMM_crossover_mat, 4},
    {"_ensembleFHMM_decimal_to_binary_mapping", (DL_FUNC) &_ensembleFHMM_decimal_to_binary_mapping, 1},
    {"_ensembleFHMM_hamming_ball", (DL_FUNC) &_ensembleFHMM_hamming_ball, 3},
    {"_ensembleFHMM_construct_all_hamming_balls", (DL_FUNC) &_ensembleFHMM_construct_all_hamming_balls, 2},
    {"_ensembleFHMM_construct_restricted_space", (DL_FUNC) &_ensembleFHMM_construct_restricted_space, 3},
    {"_ensembleFHMM_construct_all_restricted_space", (DL_FUNC) &_ensembleFHMM_construct_all_restricted_space, 3},
    {"_rcpp_module_boot_module_Chain", (DL_FUNC) &_rcpp_module_boot_module_Chain, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ensembleFHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
